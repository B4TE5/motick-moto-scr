# ============================================================================
# TEMPLATE DE VARIABLES DE ENTORNO - WALLAPOP MOTOS SCRAPER
# ============================================================================
# 
# Instrucciones:
# 1. Copia este archivo como '.env' en la raíz del proyecto
# 2. Rellena las variables con tus valores reales
# 3. NUNCA subas el archivo .env a Git (está en .gitignore)
#
# Para obtener las credenciales:
# 1. Ve a Google Cloud Console: https://console.cloud.google.com/
# 2. Crea un proyecto o usa uno existente
# 3. Habilita Google Sheets API
# 4. Crea una cuenta de servicio
# 5. Descarga el JSON de credenciales
# 6. Crea un Google Sheet y compártelo con el email de la cuenta de servicio
# ============================================================================

# ============================================================================
# GOOGLE SHEETS CONFIGURACIÓN
# ============================================================================

# ID del Google Sheet (extrae de la URL)
# Ejemplo: https://docs.google.com/spreadsheets/d/1drZonCFIP5BFuhbUW9cUauDQOWIVpE0V7P2ErpJq6bM/edit
# El ID sería: 1drZonCFIP5BFuhbUW9cUauDQOWIVpE0V7P2ErpJq6bM
GOOGLE_SHEET_ID=TU_GOOGLE_SHEET_ID_AQUI

# JSON completo de credenciales de la cuenta de servicio (todo en una línea)
# Puedes obtenerlo del archivo .json descargado de Google Cloud
# Ejemplo: {"type": "service_account", "project_id": "tu-proyecto", ...}
GOOGLE_CREDENTIALS_JSON={"type": "service_account", "project_id": "tu-proyecto", "private_key_id": "...", "private_key": "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n", "client_email": "tu-cuenta@tu-proyecto.iam.gserviceaccount.com", "client_id": "...", "auth_uri": "https://accounts.google.com/o/oauth2/auth", "token_uri": "https://oauth2.googleapis.com/token", "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs", "client_x509_cert_url": "..."}

# ============================================================================
# CONFIGURACIÓN DE LOGGING
# ============================================================================

# Nivel de logging (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Habilitar logs detallados (true/false)
VERBOSE_LOGGING=false

# ============================================================================
# CONFIGURACIÓN DE SELENIUM
# ============================================================================

# Ejecutar en modo headless (true/false)
# Recomendado: true para producción, false para debugging
HEADLESS_MODE=true

# Timeout para cargar páginas (segundos)
PAGE_LOAD_TIMEOUT=15

# Timeout implícito (segundos)
IMPLICIT_WAIT=0.5

# ============================================================================
# CONFIGURACIÓN ESPECÍFICA DE MODELOS
# ============================================================================

# Habilitar/deshabilitar modelos específicos (true/false)
ENABLE_CB125R=true
ENABLE_PCX125=true
ENABLE_AGILITY125=true
ENABLE_Z800=true
ENABLE_Z900=true
ENABLE_MT07=true
ENABLE_XMAX125=true

# ============================================================================
# CONFIGURACIÓN DE FILTROS PERSONALIZADOS
# ============================================================================

# Precio mínimo global (euros)
PRECIO_MINIMO_GLOBAL=500

# Kilometraje máximo global
KM_MAXIMO_GLOBAL=80000

# Eliminar anuncios comerciales (true/false)
ELIMINAR_COMERCIALES=true

# Eliminar anuncios de islas (true/false)
ELIMINAR_ISLAS=true

# ============================================================================
# CONFIGURACIÓN DE DESARROLLO
# ============================================================================

# Modo de desarrollo (true/false)
# En modo desarrollo se muestran más logs y se guardan archivos locales
DEV_MODE=false

# Guardar resultados locales además de subirlos (true/false)
SAVE_LOCAL_RESULTS=true

# Directorio para guardar resultados locales
LOCAL_RESULTS_DIR=resultados

# ============================================================================
# CONFIGURACIÓN DE NOTIFICACIONES (OPCIONAL)
# ============================================================================

# Email para notificaciones (opcional - feature futura)
NOTIFICATION_EMAIL=tu-email@ejemplo.com

# Webhook para notificaciones (opcional - feature futura)
NOTIFICATION_WEBHOOK=https://hooks.slack.com/services/...

# ============================================================================
# CONFIGURACIÓN DE GITHUB ACTIONS
# ============================================================================

# Estas variables se configuran en GitHub Secrets, no aquí
# Se incluyen solo como referencia

# GITHUB_ACTIONS=true (automático en GitHub Actions)
# RUNNER_OS=Linux (automático en GitHub Actions)

# ============================================================================
# CONFIGURACIÓN AVANZADA
# ============================================================================

# Número máximo de reintentos por scraper
MAX_RETRIES=3

# Delay entre reintentos (segundos)
RETRY_DELAY=5

# Timeout máximo para cada modelo (minutos)
MODEL_TIMEOUT=60

# Número máximo de resultados por modelo (0 = sin límite)
MAX_RESULTS_PER_MODEL=0

# ============================================================================
# NOTAS ADICIONALES
# ============================================================================

# 1. Las variables de entorno tienen prioridad sobre config.py
# 2. Las variables no definidas usarán valores por defecto de config.py
# 3. Para testing local, puedes usar valores menos restrictivos
# 4. Para producción, usa valores más conservadores

# ============================================================================
# EJEMPLOS DE CONFIGURACIÓN
# ============================================================================

# Para testing rápido (pocos resultados, timeouts cortos):
# PAGE_LOAD_TIMEOUT=10
# MAX_RESULTS_PER_MODEL=5
# PRECIO_MINIMO_GLOBAL=100

# Para máxima cobertura (muchos resultados, timeouts largos):
# PAGE_LOAD_TIMEOUT=30
# MAX_RESULTS_PER_MODEL=0
# PRECIO_MINIMO_GLOBAL=500

# ============================================================================
# VERIFICACIÓN DE CONFIGURACIÓN
# ============================================================================

# Puedes verificar tu configuración ejecutando:
# python src/main_runner.py --test-connection

# Para probar un modelo específico:
# python src/main_runner.py cb125r --test